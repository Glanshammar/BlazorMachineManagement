@page "/machine-management"
@using BlazorMachineManagement.Models
@using BlazorMachineManagement.DTO
@inject HttpClient HttpClient
@inject IHttpClientFactory HttpClientFactory

<h3>Machine Management</h3>

<h4>Machine List</h4>
<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Status</th>
            <th>Temperature</th>
            <th>Production Rate</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var machine in machines)
        {
            <tr>
                <td>@machine.Name</td>
                <td>@(machine.IsOnline ? "Online" : "Offline")</td>
                <td>@machine.Temperature</td>
                <td>@machine.ProductionRate</td>
                <td>
                    <button class="btn btn-primary" @onclick="() => EditMachine(machine)">Edit</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<h4>@(editingMachine == null ? "Add New Machine" : "Edit Machine")</h4>
<EditForm Model="@machineData" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="name">Name:</label>
        <InputText id="name" @bind-Value="machineData.Name" class="form-control" />
    </div>

    <div class="form-group">
        <label for="isOnline">Status:</label>
        <InputSelect id="isOnline" @bind-Value="machineData.IsOnline" class="form-control">
            <option value="true">Online</option>
            <option value="false">Offline</option>
        </InputSelect>
    </div>

    <div class="form-group">
        <label for="temperature">Temperature:</label>
        <InputNumber id="temperature" @bind-Value="machineData.Temperature" class="form-control" />
    </div>

    <div class="form-group">
        <label for="productionRate">Production Rate:</label>
        <InputNumber id="productionRate" @bind-Value="machineData.ProductionRate" class="form-control" />
    </div>

    <button type="submit" class="btn btn-primary">@(editingMachine == null ? "Add Machine" : "Update Machine")</button>
    @if (editingMachine != null)
    {
        <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
    }
</EditForm>

@code {
    private List<Machine> machines = new List<Machine>();
    private MachineDataDto machineData = new MachineDataDto();
    private Machine editingMachine;

    protected override async Task OnInitializedAsync()
    {
        await LoadMachines();
    }

    private async Task LoadMachines()
    {
        var client = HttpClientFactory.CreateClient("API");
        machines = await client.GetFromJsonAsync<List<Machine>>("api/machines") ?? new List<Machine>();
    }
    
    private void EditMachine(Machine machine)
    {
        editingMachine = machine;
        machineData = new MachineDataDto
        {
            Name = machine.Name,
            IsOnline = machine.IsOnline,
            Temperature = machine.Temperature,
            ProductionRate = machine.ProductionRate
        };
    }

    private async Task HandleValidSubmit()
    {
        if (editingMachine == null)
        {
            await HttpClient.PostAsJsonAsync("api/machines", machineData);
        }
        else
        {
            await HttpClient.PutAsJsonAsync($"api/machines/{editingMachine.Id}", machineData);
        }

        await LoadMachines();
        CancelEdit();
    }

    private void CancelEdit()
    {
        editingMachine = null;
        machineData = new MachineDataDto();
    }
}
